//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

//-----ClientClass--Client---
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming


export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:8080";

    }

    /**
     * Handle login and set the access token into the cookie
     * @param body Body
     * @return OK
     */
    login(body: LoginInput, cancelToken?: CancelToken | undefined): Promise<ResponseBool> {
        let url_ = this.baseUrl + "/api/v1/auth/login";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<ResponseBool> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseBool.fromJS(resultData200);
            return Promise.resolve<ResponseBool>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ResponseString.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = ResponseString.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ResponseString.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);

        } else if (status === 503) {
            const _responseText = response.data;
            let result503: any = null;
            let resultData503  = _responseText;
            result503 = ResponseString.fromJS(resultData503);
            return throwException("Service Unavailable", status, _responseText, _headers, result503);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseBool>(null as any);
    }

    /**
     * Handle logout and clear the access token from the Cookie
     * @return OK
     */
    logout( cancelToken?: CancelToken | undefined): Promise<ResponseBool> {
        let url_ = this.baseUrl + "/api/v1/auth/logout";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: AxiosResponse): Promise<ResponseBool> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseBool.fromJS(resultData200);
            return Promise.resolve<ResponseBool>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = ResponseString.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);

        } else if (status === 503) {
            const _responseText = response.data;
            let result503: any = null;
            let resultData503  = _responseText;
            result503 = ResponseString.fromJS(resultData503);
            return throwException("Service Unavailable", status, _responseText, _headers, result503);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseBool>(null as any);
    }

    /**
     * Facts about cats
     * @return OK
     */
    cats( cancelToken?: CancelToken | undefined): Promise<ResponseArray_handler_FactResponse> {
        let url_ = this.baseUrl + "/api/v1/facts/cats";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCats(_response);
        });
    }

    protected processCats(response: AxiosResponse): Promise<ResponseArray_handler_FactResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseArray_handler_FactResponse.fromJS(resultData200);
            return Promise.resolve<ResponseArray_handler_FactResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = ResponseString.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);

        } else if (status === 503) {
            const _responseText = response.data;
            let result503: any = null;
            let resultData503  = _responseText;
            result503 = ResponseString.fromJS(resultData503);
            return throwException("Service Unavailable", status, _responseText, _headers, result503);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseArray_handler_FactResponse>(null as any);
    }

    /**
     * Facts about dogs
     * @return OK
     */
    dogs( cancelToken?: CancelToken | undefined): Promise<ResponseHandler_FactResponse> {
        let url_ = this.baseUrl + "/api/v1/facts/dogs";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDogs(_response);
        });
    }

    protected processDogs(response: AxiosResponse): Promise<ResponseHandler_FactResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseHandler_FactResponse.fromJS(resultData200);
            return Promise.resolve<ResponseHandler_FactResponse>(result200);

        } else if (status === 503) {
            const _responseText = response.data;
            let result503: any = null;
            let resultData503  = _responseText;
            result503 = ResponseString.fromJS(resultData503);
            return throwException("Service Unavailable", status, _responseText, _headers, result503);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseHandler_FactResponse>(null as any);
    }

    /**
     * Handle the sum service using the query string
     * @param num1 Number One
     * @param num2 Number Two
     * @return OK
     */
    sumGET(num1: number, num2: number, cancelToken?: CancelToken | undefined): Promise<ResponseSumOutput> {
        let url_ = this.baseUrl + "/api/v1/sum?";
          if (num1 === undefined || num1 === null)
            throw new Error("The parameter 'num1' must be defined and cannot be null.");
          else
            url_ += "num1=" + encodeURIComponent("" + num1) + "&";
          if (num2 === undefined || num2 === null)
            throw new Error("The parameter 'num2' must be defined and cannot be null.");
          else
            url_ += "num2=" + encodeURIComponent("" + num2) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSumGET(_response);
        });
    }

    protected processSumGET(response: AxiosResponse): Promise<ResponseSumOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseSumOutput.fromJS(resultData200);
            return Promise.resolve<ResponseSumOutput>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ResponseString.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseSumOutput>(null as any);
    }

    /**
     * Handle the sum service using the body
     * @param input body input
     * @return OK
     */
    sumPOST(input: SumInput, cancelToken?: CancelToken | undefined): Promise<ResponseSumOutput> {
        let url_ = this.baseUrl + "/api/v1/sum";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSumPOST(_response);
        });
    }

    protected processSumPOST(response: AxiosResponse): Promise<ResponseSumOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseSumOutput.fromJS(resultData200);
            return Promise.resolve<ResponseSumOutput>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ResponseString.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseSumOutput>(null as any);
    }

    /**
     * Handle sum with first number in route path and second in query string
     * @param num1 Number One
     * @param num2 Number Two
     * @return OK
     */
    sumGET2(num1: number, num2: number, cancelToken?: CancelToken | undefined): Promise<ResponseSumOutput> {
        let url_ = this.baseUrl + "/api/v1/sum/{num1}?";
        if (num1 === undefined || num1 === null)
          throw new Error("The parameter 'num1' must be defined.");
        url_ = url_.replace("{num1}", encodeURIComponent("" + num1));
          if (num2 === undefined || num2 === null)
            throw new Error("The parameter 'num2' must be defined and cannot be null.");
          else
            url_ += "num2=" + encodeURIComponent("" + num2) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSumGET2(_response);
        });
    }

    protected processSumGET2(response: AxiosResponse): Promise<ResponseSumOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseSumOutput.fromJS(resultData200);
            return Promise.resolve<ResponseSumOutput>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ResponseString.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseSumOutput>(null as any);
    }

    /**
     * Handle the sum service using the route path
     * @param num1 Number One
     * @param num2 Number Two
     * @return OK
     */
    sumGET3(num1: number, num2: number, cancelToken?: CancelToken | undefined): Promise<ResponseSumOutput> {
        let url_ = this.baseUrl + "/api/v1/sum/{num1}/{num2}";
        if (num1 === undefined || num1 === null)
          throw new Error("The parameter 'num1' must be defined.");
        url_ = url_.replace("{num1}", encodeURIComponent("" + num1));
        if (num2 === undefined || num2 === null)
          throw new Error("The parameter 'num2' must be defined.");
        url_ = url_.replace("{num2}", encodeURIComponent("" + num2));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSumGET3(_response);
        });
    }

    protected processSumGET3(response: AxiosResponse): Promise<ResponseSumOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseSumOutput.fromJS(resultData200);
            return Promise.resolve<ResponseSumOutput>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ResponseString.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseSumOutput>(null as any);
    }

    /**
     * Heartbeat returns a JSON response with the heartbeat status
     * @return OK
     */
    heartbeat( cancelToken?: CancelToken | undefined): Promise<ResponseString> {
        let url_ = this.baseUrl + "/heartbeat";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHeartbeat(_response);
        });
    }

    protected processHeartbeat(response: AxiosResponse): Promise<ResponseString> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseString.fromJS(resultData200);
            return Promise.resolve<ResponseString>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseString>(null as any);
    }
}

//-----/ClientClass----

export * as Query from './axios-client/Query';



//-----Types.File-----
export class ResponseSumOutput implements IResponseSumOutput {
    data?: SumOutput | undefined;
    error?: boolean | undefined;
    message?: string | undefined;

    constructor(data?: IResponseSumOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? SumOutput.fromJS(_data["data"]) : <any>undefined;
            this.error = _data["error"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ResponseSumOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseSumOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["error"] = this.error;
        data["message"] = this.message;
        return data;
    }
}

export interface IResponseSumOutput {
    data?: SumOutput | undefined;
    error?: boolean | undefined;
    message?: string | undefined;
}

export class ResponseArray_handler_FactResponse implements IResponseArray_handler_FactResponse {
    data?: FactResponse[] | undefined;
    error?: boolean | undefined;
    message?: string | undefined;

    constructor(data?: IResponseArray_handler_FactResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(FactResponse.fromJS(item));
            }
            this.error = _data["error"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ResponseArray_handler_FactResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseArray_handler_FactResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["error"] = this.error;
        data["message"] = this.message;
        return data;
    }
}

export interface IResponseArray_handler_FactResponse {
    data?: FactResponse[] | undefined;
    error?: boolean | undefined;
    message?: string | undefined;
}

export class ResponseBool implements IResponseBool {
    data?: boolean | undefined;
    error?: boolean | undefined;
    message?: string | undefined;

    constructor(data?: IResponseBool) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.error = _data["error"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ResponseBool {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseBool();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["error"] = this.error;
        data["message"] = this.message;
        return data;
    }
}

export interface IResponseBool {
    data?: boolean | undefined;
    error?: boolean | undefined;
    message?: string | undefined;
}

export class ResponseHandler_FactResponse implements IResponseHandler_FactResponse {
    data?: FactResponse | undefined;
    error?: boolean | undefined;
    message?: string | undefined;

    constructor(data?: IResponseHandler_FactResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? FactResponse.fromJS(_data["data"]) : <any>undefined;
            this.error = _data["error"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ResponseHandler_FactResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseHandler_FactResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["error"] = this.error;
        data["message"] = this.message;
        return data;
    }
}

export interface IResponseHandler_FactResponse {
    data?: FactResponse | undefined;
    error?: boolean | undefined;
    message?: string | undefined;
}

export class ResponseString implements IResponseString {
    data?: string | undefined;
    error?: boolean | undefined;
    message?: string | undefined;

    constructor(data?: IResponseString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.error = _data["error"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ResponseString {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["error"] = this.error;
        data["message"] = this.message;
        return data;
    }
}

export interface IResponseString {
    data?: string | undefined;
    error?: boolean | undefined;
    message?: string | undefined;
}

export class SumInput implements ISumInput {
    num1!: number;
    num2!: number;

    constructor(data?: ISumInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.num1 = _data["num1"];
            this.num2 = _data["num2"];
        }
    }

    static fromJS(data: any): SumInput {
        data = typeof data === 'object' ? data : {};
        let result = new SumInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["num1"] = this.num1;
        data["num2"] = this.num2;
        return data;
    }
}

export interface ISumInput {
    num1: number;
    num2: number;
}

export class SumOutput implements ISumOutput {
    result?: number | undefined;

    constructor(data?: ISumOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): SumOutput {
        data = typeof data === 'object' ? data : {};
        let result = new SumOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        return data;
    }
}

export interface ISumOutput {
    result?: number | undefined;
}

export class FactResponse implements IFactResponse {
    id?: string | undefined;
    text?: string | undefined;

    constructor(data?: IFactResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): FactResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FactResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["text"] = this.text;
        return data;
    }
}

export interface IFactResponse {
    id?: string | undefined;
    text?: string | undefined;
}

export class LoginInput implements ILoginInput {
    password?: string | undefined;
    username?: string | undefined;

    constructor(data?: ILoginInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.password = _data["password"];
            this.username = _data["username"];
        }
    }

    static fromJS(data: any): LoginInput {
        data = typeof data === 'object' ? data : {};
        let result = new LoginInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password;
        data["username"] = this.username;
        return data;
    }
}

export interface ILoginInput {
    password?: string | undefined;
    username?: string | undefined;
}
//-----/CustomTypes.File-----

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

//-----/Types.File-----

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl, getBaseUrl } from './axios-client/helpers';
export { setAxiosFactory, getAxios } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('Client___logout', (data: any) => { const result = new ResponseBool(); result.init(data); return result; });
  addResultTypeFactory('Client___cats', (data: any) => { const result = new ResponseArray_handler_FactResponse(); result.init(data); return result; });
  addResultTypeFactory('Client___dogs', (data: any) => { const result = new ResponseHandler_FactResponse(); result.init(data); return result; });
  addResultTypeFactory('Client___sumGET', (data: any) => { const result = new ResponseSumOutput(); result.init(data); return result; });
  addResultTypeFactory('Client___sumGET2', (data: any) => { const result = new ResponseSumOutput(); result.init(data); return result; });
  addResultTypeFactory('Client___sumGET3', (data: any) => { const result = new ResponseSumOutput(); result.init(data); return result; });
  addResultTypeFactory('Client___heartbeat', (data: any) => { const result = new ResponseString(); result.init(data); return result; });


}
//-----/PersistorHydrator.File----